● - What is `NPM`?
NPM is a package manager used to install, update and remove packages and dependencies of any project.

● - What is `Parcel/Webpack`? Why do we need it?
Parcel/Webpack are the bundlers, which bundles all the files to make it production ready.

● - What is `.parcel-cache`
`.parcel-cache` is a folder created by Parcel, which stores cache of application to optimize and make application to load faster.

● - What is `npx` ?
npx is a NPM package runner to execute any Javascript Package available on the NPM registry without even installing it.

● - What is difference between `dependencies` vs `devDependencies`
`dependencies` are the required files and packages required for application while devDependencies are same as dependencies needed only during development.

● - What is Tree Shaking?
Tree shaking is a technique that removes unused code from an application's final bundle file. This reduces the download size and improves performance. Tree shaking is commonly used in JavaScript, Dart, and Typescript. 
Tree shaking works by using import and export statements to detect if code modules are exported and imported between JavaScript files. It's a form of dead code elimination.

● - What is Hot Module Replacement?

Hot Module Replacement (HMR) is a feature commonly used in modern web development, especially in the context of JavaScript-based front-end frameworks like React, Vue.js, and Angular, as well as in some back-end development environments.

HMR allows developers to update the code of a live application without requiring a full page reload. This means that changes made to the source code can be reflected in the running application almost instantly, preserving the application's state. This can significantly speed up the development process and enhance the developer experience.

Here's how HMR typically works:

Detecting Changes: The development server monitors the project files for changes. When a file is modified, it triggers the HMR process.

Transmitting Updates: The updated modules are transmitted to the browser or the server without requiring a full page reload. Only the modules that have changed are sent, not the entire application.

Applying Updates: The application then applies these updates in real-time, which can include replacing or updating components, styles, or other modules.

Preserving State: Importantly, HMR aims to preserve the current state of the application. This means that if you are in a certain state in your application (e.g., you have a form partially filled out), applying an update should not reset the application to its initial state.

● - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.

- Dev Build
- Local Server
- HMR = Hot Module Replacement
- File Watching Algoritms - Written in C++
- Caching - Building Cache For Faster Build
- Image Optimization
- Minification
- Bundling
- Compressing
- Consistent Hashing
- Code Splitting
- Differential Bundling - support older browsers
- Diagnostic
- Error Handling
- HTTPS
- Tree Shaking - to remove unused code
- Different dev and production bundles

● - What is `.gitignore`? What should we add and not add into it?
`.gitignore` is a file in git repository which will ignore the files and folders listed in it.
We should add the files or folders which can be created by running the command such folder as npm_modules, dist, images and large files.

● - What is the difference between `package.json` and `package-lock.json`

package.json and package-lock.json are both files used in Node.js projects to manage dependencies, but they serve slightly different purposes.

package.json:

Purpose: This file is the manifest for your project and is used to define various metadata about the project, including its dependencies, scripts, and other configuration settings.

Content:

Project metadata (name, version, description, author, license, etc.).
A list of project dependencies with their specified versions or version ranges.
Scripts to run various tasks (start, test, build, etc.).
Other configuration settings.

package-lock.json:

Purpose: This file is automatically generated by npm to provide a more deterministic and reproducible build for your project by locking down the version of each installed dependency.

Content:

An exact, nested representation of the dependency tree, including the specific versions of each package.
Information about the integrity of each installed package to ensure it hasn't been tampered with.
Information to resolve discrepancies in dependency versions.

● - Why should I not modify `package-lock.json`?
`package-lock.json` shouldn't be modified manually as it is an exact, nested representation of the dependency tree, including the specific versions of each package.

● - What is `node_modules` ? Is it a good idea to push that on git?
The node_modules directory contains project dependencies in a Node.js project. 
It's generally not a good idea to push it to Git due to its large size. Instead, include package.json and package-lock.json in version control to allow others to reproduce the dependency tree with npm install. 
Add node_modules/ to your .gitignore file to exclude it from versioning.

● - What is the `dist` folder?
dist Folder:

Purpose: Holds production-ready files for deployment.
Contents: Optimized and bundled files (e.g., minified JavaScript, compressed CSS).


● - What is `browserlists`
Purpose: Configures supported browsers for tools like Autoprefixer.
Contents: Specifies targeted browsers or versions for compatibility.
Usage: Influences output of development tools based on specified browser 

Read about dif bundlers: vite, webpack, parcel
● Read about: ^ - caret and ~ - tilda
● Read about Script types in html (MDN Docs)